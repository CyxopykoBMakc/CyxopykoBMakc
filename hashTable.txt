using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HashTable
{
    class Program
    {
        static void Main(string[] args)
        {
            tryTest1();
            tryTest2();
            tryTest3();
            tryTest4();
            Console.ReadKey();
        }

        public class HashTable
        {
            private KeyValuePair[] array;

            public HashTable(int size)
            {
                array = new KeyValuePair[size];
            }

            public void PutPairOfElements(object key, object value)
            {

                var hashCode = key.GetHashCode();
                var Number = GetNumber(key);

                var stack = array[Number];

                while (stack != null)
                {
                    if (Equals(stack.Key, key))
                    {
                        stack.Value = value;
                        return;
                    }
                    stack = stack.Next;
                }

                var writeStack = array[Number];

                if (writeStack == null)
                {
                    array[Number] = new KeyValuePair { Value = value, Key = key };
                }

                else
                {
                    while (writeStack.Next != null)
                    {
                        writeStack = writeStack.Next;
                    }
                    writeStack.Next = new KeyValuePair { Value = value, Key = key };
                }

            }
            private int GetNumber(object key)
            {
                var hashCode = key.GetHashCode();
                var Number = Math.Abs(hashCode) % array.Length;
                return Number;
            }

            public object GetValueByKey(object key)
            {

                var Number = GetNumber(key);
                var stack = array[Number];

                while(stack != null)
                {
                    if (Equals(stack.Key, key))
                    {
                        return stack.Value;
                    }

                    stack = stack.Next;
                }
                return null;
            }

            class KeyValuePair
            {
                public Object Key { get; set; }
                public Object Value { get; set; }
                public KeyValuePair Next { get; set; }
            }
        }

        private static void tryTest1()
        {
            HashTable hashTable = new HashTable(3);
            int j = 0;

            for (int i = 0; i < 3; i++)
            {
                hashTable.PutPairOfElements("key" + i, "value" + i);
            }

            for (int i = 0; i < 3; i++)
            {
                if (hashTable.GetValueByKey("key" + i).Equals("value" + i))
                {
                    j++;
                }
            }

            if (j == 3)
            {
                Console.WriteLine("1.Program works!");
            }

            else
            {
                Console.WriteLine("1.!!!!!!!!!!!!!!Program doesn.t work!!!!!!!!!!!!!!!!");
            }
        }

        private static void tryTest2()
        {
            HashTable hashTable = new HashTable(2);

            hashTable.PutPairOfElements("key25", "value5");
            hashTable.PutPairOfElements("key25", "value7");

            if (hashTable.GetValueByKey("key25").Equals("value7"))
            {
                Console.WriteLine("2.Program works!");
            }

            else 
            {
                Console.WriteLine("2.!!!!!!!!!!!!!!!!!!!!Program doesn't work!!!!!!!!!!!!!!!!!!!!");
            }
        }

        private static void tryTest3()
        {
            HashTable hashTable = new HashTable(10000);

            for (int i = 0; i < 10000; i++)
            {
                hashTable.PutPairOfElements("key" + (i + 5), "value" + i);
            }

            if (hashTable.GetValueByKey("key505").Equals("value500"))
            {
                Console.WriteLine("3.Program works!");
            }

            else
            {
                Console.WriteLine("3.!!!!!!!!!!!!!!!Program doesn't work!!!!!!!!!!!!!!!!!!!!!");
            }
        }

        private static void tryTest4()
        {
            HashTable hashTable = new HashTable(10000);

            for (int i = 0; i < 10000; i++)
            {
                hashTable.PutPairOfElements(i, i);
            }

            int j = 0;

            for (int i = 10000; i < 11000; i++)
            {
                if (hashTable.GetValueByKey(i) == null)
                {
                    j++;
                }
            }

            if (j == 1000)
            {
                Console.WriteLine("4.Program works!");
            }

            else
            {
                Console.WriteLine("4.!!!!!!!!!!!!!!!!!!Program doesn't work!!!!!!!!!!!!!!!!!!!!");
            }
        }
    }
}
